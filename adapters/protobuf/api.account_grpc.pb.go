// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api.account.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiAccountClient is the client API for ApiAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiAccountClient interface {
	Insert(ctx context.Context, in *RequestAccountInsert, opts ...grpc.CallOption) (*ResponseAccountInsert, error)
	Find(ctx context.Context, in *RequestAccountFind, opts ...grpc.CallOption) (*ResponseAccountFind, error)
	Get(ctx context.Context, in *RequestAccountGet, opts ...grpc.CallOption) (*ResponseAccountGet, error)
	Update(ctx context.Context, in *RequestAccountUpdate, opts ...grpc.CallOption) (*ResponseAccountUpdate, error)
	Delete(ctx context.Context, in *RequestAccountDelete, opts ...grpc.CallOption) (*ResponseAccountDelete, error)
}

type apiAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewApiAccountClient(cc grpc.ClientConnInterface) ApiAccountClient {
	return &apiAccountClient{cc}
}

func (c *apiAccountClient) Insert(ctx context.Context, in *RequestAccountInsert, opts ...grpc.CallOption) (*ResponseAccountInsert, error) {
	out := new(ResponseAccountInsert)
	err := c.cc.Invoke(ctx, "/service_account.ApiAccount/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiAccountClient) Find(ctx context.Context, in *RequestAccountFind, opts ...grpc.CallOption) (*ResponseAccountFind, error) {
	out := new(ResponseAccountFind)
	err := c.cc.Invoke(ctx, "/service_account.ApiAccount/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiAccountClient) Get(ctx context.Context, in *RequestAccountGet, opts ...grpc.CallOption) (*ResponseAccountGet, error) {
	out := new(ResponseAccountGet)
	err := c.cc.Invoke(ctx, "/service_account.ApiAccount/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiAccountClient) Update(ctx context.Context, in *RequestAccountUpdate, opts ...grpc.CallOption) (*ResponseAccountUpdate, error) {
	out := new(ResponseAccountUpdate)
	err := c.cc.Invoke(ctx, "/service_account.ApiAccount/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiAccountClient) Delete(ctx context.Context, in *RequestAccountDelete, opts ...grpc.CallOption) (*ResponseAccountDelete, error) {
	out := new(ResponseAccountDelete)
	err := c.cc.Invoke(ctx, "/service_account.ApiAccount/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiAccountServer is the server API for ApiAccount service.
// All implementations must embed UnimplementedApiAccountServer
// for forward compatibility
type ApiAccountServer interface {
	Insert(context.Context, *RequestAccountInsert) (*ResponseAccountInsert, error)
	Find(context.Context, *RequestAccountFind) (*ResponseAccountFind, error)
	Get(context.Context, *RequestAccountGet) (*ResponseAccountGet, error)
	Update(context.Context, *RequestAccountUpdate) (*ResponseAccountUpdate, error)
	Delete(context.Context, *RequestAccountDelete) (*ResponseAccountDelete, error)
	mustEmbedUnimplementedApiAccountServer()
}

// UnimplementedApiAccountServer must be embedded to have forward compatible implementations.
type UnimplementedApiAccountServer struct {
}

func (UnimplementedApiAccountServer) Insert(context.Context, *RequestAccountInsert) (*ResponseAccountInsert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedApiAccountServer) Find(context.Context, *RequestAccountFind) (*ResponseAccountFind, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedApiAccountServer) Get(context.Context, *RequestAccountGet) (*ResponseAccountGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApiAccountServer) Update(context.Context, *RequestAccountUpdate) (*ResponseAccountUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApiAccountServer) Delete(context.Context, *RequestAccountDelete) (*ResponseAccountDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApiAccountServer) mustEmbedUnimplementedApiAccountServer() {}

// UnsafeApiAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiAccountServer will
// result in compilation errors.
type UnsafeApiAccountServer interface {
	mustEmbedUnimplementedApiAccountServer()
}

func RegisterApiAccountServer(s grpc.ServiceRegistrar, srv ApiAccountServer) {
	s.RegisterService(&ApiAccount_ServiceDesc, srv)
}

func _ApiAccount_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccountInsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiAccountServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_account.ApiAccount/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiAccountServer).Insert(ctx, req.(*RequestAccountInsert))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiAccount_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccountFind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiAccountServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_account.ApiAccount/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiAccountServer).Find(ctx, req.(*RequestAccountFind))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiAccount_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccountGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiAccountServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_account.ApiAccount/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiAccountServer).Get(ctx, req.(*RequestAccountGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiAccount_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccountUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiAccountServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_account.ApiAccount/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiAccountServer).Update(ctx, req.(*RequestAccountUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiAccount_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccountDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiAccountServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_account.ApiAccount/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiAccountServer).Delete(ctx, req.(*RequestAccountDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiAccount_ServiceDesc is the grpc.ServiceDesc for ApiAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_account.ApiAccount",
	HandlerType: (*ApiAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _ApiAccount_Insert_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _ApiAccount_Find_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApiAccount_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApiAccount_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApiAccount_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.account.proto",
}
